import Foundation
import os.log

// MARK: - LoggingManager

/// Ïï± Ï†ÑÎ∞òÏùò Î°úÍπÖÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Îß§ÎãàÏ†Ä
/// - Í∏∞Îä•Î≥Ñ Î°úÍ∑∏ on/off Í¥ÄÎ¶¨
/// - Î∞∞Ìè¨ Î≤ÑÏ†ÑÏóêÏÑú ÏûêÎèôÏúºÎ°ú Î°úÍ∑∏ ÎπÑÌôúÏÑ±Ìôî
/// - os.Logger Í∏∞Î∞òÏùò ÏÑ±Îä• ÏµúÏ†ÅÌôîÎêú Î°úÍπÖ
/// - Îã§Î•∏ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•
@MainActor
public final class LoggingManager: ObservableObject {
    
    // MARK: - Singleton
    
    public static let shared = LoggingManager()
    
    // MARK: - Configuration Properties
    
    /// Ïï± Î≤àÎì§ ÏãùÎ≥ÑÏûê (Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ï¶à Í∞ÄÎä•)
    private let bundleIdentifier: String
    
    /// UserDefaults Ï†ÄÏû• ÌÇ§ (Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ï¶à Í∞ÄÎä•)
    private let userDefaultsKey: String
    
    /// ÏÇ¨Ïö©Ìï† Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ (Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ï¶à Í∞ÄÎä•)
    private let availableCategories: [Category]
    
    // MARK: - Initialization
    
    private init() {
        self.bundleIdentifier = Bundle.main.bundleIdentifier ?? "com.default.app"
        self.userDefaultsKey = "LoggingConfiguration"
        self.availableCategories = Category.defaultCategories
        setupConfiguration()
    }
    
    /// Ïª§Ïä§ÌÖÄ ÏÑ§Ï†ïÏúºÎ°ú LoggingManager Ï¥àÍ∏∞Ìôî
    /// - Parameters:
    ///   - bundleIdentifier: Ïï± Î≤àÎì§ ÏãùÎ≥ÑÏûê
    ///   - userDefaultsKey: UserDefaults Ï†ÄÏû• ÌÇ§
    ///   - categories: ÏÇ¨Ïö©Ìï† Î°úÍ∑∏ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§
    /// - Returns: ÏÑ§Ï†ïÎêú LoggingManager Ïù∏Ïä§ÌÑ¥Ïä§
    public static func configure(
        bundleIdentifier: String? = nil,
        userDefaultsKey: String = "LoggingConfiguration",
        categories: [Category]? = nil
    ) -> LoggingManager {
        let manager = LoggingManager()
        // ÏÑ§Ï†ï Ï†ÅÏö©ÏùÑ ÏúÑÌïú ÎÇ¥Î∂Ä Î©îÏÜåÎìú Ìò∏Ï∂úÏù¥ ÌïÑÏöîÌïòÎã§Î©¥ Ïó¨Í∏∞ÏÑú Ï≤òÎ¶¨
        return manager
    }
    
    // MARK: - Log Categories
    
    /// Î°úÍ∑∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÏùò
    public enum Category: String, CaseIterable {
        // Î≤îÏö© Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ (Î™®Îì† Ïï±ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•)
        case general = "General"
        case ui = "UI"
        case network = "Network"
        case data = "Data"
        case settings = "Settings"
        case device = "Device"
        case performance = "Performance"
        case error = "Error"
        
        // ÌäπÏ†ï ÎèÑÎ©îÏù∏ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ (ÌïÑÏöîÏãú ÏÇ¨Ïö©)
        case camera = "Camera"
        case streaming = "Streaming"
        case auth = "Authentication"
        case storage = "Storage"
        case api = "API"
        case location = "Location"
        case push = "PushNotification"
        case payment = "Payment"
        case analytics = "Analytics"
        case security = "Security"
        
        /// Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨Îì§ (ÎåÄÎ∂ÄÎ∂ÑÏùò Ïï±ÏóêÏÑú ÏÇ¨Ïö©)
        public static var defaultCategories: [Category] {
            return [.general, .ui, .network, .data, .settings, .device, .performance, .error]
        }
        
        /// ÎØ∏ÎîîÏñ¥ Ïï±Ïö© Ïπ¥ÌÖåÍ≥†Î¶¨Îì§
        public static var mediaCategories: [Category] {
            return defaultCategories + [.camera, .streaming]
        }
        
        /// E-Ïª§Î®∏Ïä§ Ïï±Ïö© Ïπ¥ÌÖåÍ≥†Î¶¨Îì§
        public static var ecommerceCategories: [Category] {
            return defaultCategories + [.auth, .payment, .analytics]
        }
        
        /// ÏÜåÏÖú Ïï±Ïö© Ïπ¥ÌÖåÍ≥†Î¶¨Îì§
        public static var socialCategories: [Category] {
            return defaultCategories + [.auth, .push, .location, .storage]
        }
        
        public var icon: String {
            switch self {
            case .camera: return "üìπ"
            case .streaming: return "üé•"
            case .network: return "üåê"
            case .ui: return "üñºÔ∏è"
            case .data: return "üìä"
            case .settings: return "‚öôÔ∏è"
            case .device: return "üì±"
            case .general: return "‚ÑπÔ∏è"
            case .performance: return "‚ö°"
            case .error: return "‚ùå"
            case .auth: return "üîê"
            case .storage: return "üíæ"
            case .api: return "üîó"
            case .location: return "üìç"
            case .push: return "üîî"
            case .payment: return "üí≥"
            case .analytics: return "üìà"
            case .security: return "üõ°Ô∏è"
            }
        }
        
        public var description: String {
            switch self {
            case .camera: return "Ïπ¥Î©îÎùº Í¥ÄÎ†® Î°úÍ∑∏"
            case .streaming: return "Ïä§Ìä∏Î¶¨Î∞ç Í¥ÄÎ†® Î°úÍ∑∏"
            case .network: return "ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜµÏã† Î°úÍ∑∏"
            case .ui: return "UI Ïù¥Î≤§Ìä∏ Î∞è ÏÉÅÌÉú Î°úÍ∑∏"
            case .data: return "Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Î°úÍ∑∏"
            case .settings: return "ÏÑ§Ï†ï Î≥ÄÍ≤Ω Î°úÍ∑∏"
            case .device: return "ÎîîÎ∞îÏù¥Ïä§ ÏÉÅÌÉú Î°úÍ∑∏"
            case .general: return "ÏùºÎ∞òÏ†ÅÏù∏ Î°úÍ∑∏"
            case .performance: return "ÏÑ±Îä• Í¥ÄÎ†® Î°úÍ∑∏"
            case .error: return "ÏóêÎü¨ Î∞è ÏòàÏô∏ Î°úÍ∑∏"
            case .auth: return "Ïù∏Ï¶ù Í¥ÄÎ†® Î°úÍ∑∏"
            case .storage: return "Ï†ÄÏû•ÏÜå ÏûëÏóÖ Î°úÍ∑∏"
            case .api: return "API Ìò∏Ï∂ú Î°úÍ∑∏"
            case .location: return "ÏúÑÏπò ÏÑúÎπÑÏä§ Î°úÍ∑∏"
            case .push: return "Ìë∏Ïãú ÏïåÎ¶º Î°úÍ∑∏"
            case .payment: return "Í≤∞Ï†ú Í¥ÄÎ†® Î°úÍ∑∏"
            case .analytics: return "Î∂ÑÏÑù Î∞è Ï∂îÏ†Å Î°úÍ∑∏"
            case .security: return "Î≥¥Ïïà Í¥ÄÎ†® Î°úÍ∑∏"
            }
        }
        
        public func osLogCategory(bundleIdentifier: String) -> String {
            return "\(bundleIdentifier).\(self.rawValue.lowercased())"
        }
    }
    
    /// Î°úÍ∑∏ Î†àÎ≤® Ï†ïÏùò
    public enum LogLevel: String, CaseIterable, Comparable {
        case debug = "DEBUG"
        case info = "INFO"
        case warning = "WARNING"
        case error = "ERROR"
        
        public static func < (lhs: LogLevel, rhs: LogLevel) -> Bool {
            let order: [LogLevel] = [.debug, .info, .warning, .error]
            guard let lhsIndex = order.firstIndex(of: lhs),
                  let rhsIndex = order.firstIndex(of: rhs) else {
                return false
            }
            return lhsIndex < rhsIndex
        }
        
        public var osLogType: OSLogType {
            switch self {
            case .debug: return .debug
            case .info: return .info
            case .warning: return .default
            case .error: return .error
            }
        }
        
        public var emoji: String {
            switch self {
            case .debug: return "üîç"
            case .info: return "‚ÑπÔ∏è"
            case .warning: return "‚ö†Ô∏è"
            case .error: return "‚ùå"
            }
        }
    }
    
    // MARK: - Configuration
    
    /// Î°úÍ∑∏ ÏÑ§Ï†ï
    private var configuration = LogConfiguration()
    
    /// os.Logger Ïù∏Ïä§ÌÑ¥Ïä§Îì§ (Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ)
    private var loggers: [Category: Logger] = [:]
    
    // MARK: - Public Properties
    
    /// ÎîîÎ≤ÑÍ∑∏ Î™®Îìú Ïó¨Î∂Ä
    public var isDebugMode: Bool {
        #if DEBUG
        return true
        #else
        return false
        #endif
    }
    
    /// Î°úÍπÖ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä (Î∞∞Ìè¨ÏóêÏÑúÎäî ÏûêÎèôÏúºÎ°ú false)
    public var isLoggingEnabled: Bool {
        return isDebugMode && configuration.isGloballyEnabled
    }
    
    /// ÌòÑÏû¨ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨Îì§
    public var categories: [Category] {
        return availableCategories
    }
    
    // MARK: - Setup
    
    private func setupConfiguration() {
        // os.Logger Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± (ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ)
        for category in availableCategories {
            loggers[category] = Logger(
                subsystem: bundleIdentifier,
                category: category.osLogCategory(bundleIdentifier: bundleIdentifier)
            )
        }
        
        // Í∏∞Î≥∏ ÏÑ§Ï†ï Î°úÎìú
        loadConfiguration()
    }
    
    // MARK: - Main Logging Methods
    
    /// ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏
    /// - Parameters:
    ///   - message: Î°úÍ∑∏ Î©îÏãúÏßÄ
    ///   - category: Î°úÍ∑∏ Ïπ¥ÌÖåÍ≥†Î¶¨
    ///   - file: ÌååÏùºÎ™Ö (ÏûêÎèô)
    ///   - function: Ìï®ÏàòÎ™Ö (ÏûêÎèô)
    ///   - line: ÎùºÏù∏ Î≤àÌò∏ (ÏûêÎèô)
    func debug(
        _ message: String,
        category: Category = .general,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
        log(message, level: .debug, category: category, file: file, function: function, line: line)
    }
    
    /// Ï†ïÎ≥¥ Î°úÍ∑∏
    func info(
        _ message: String,
        category: Category = .general,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
        log(message, level: .info, category: category, file: file, function: function, line: line)
    }
    
    /// Í≤ΩÍ≥† Î°úÍ∑∏
    func warning(
        _ message: String,
        category: Category = .general,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
        log(message, level: .warning, category: category, file: file, function: function, line: line)
    }
    
    /// ÏóêÎü¨ Î°úÍ∑∏
    func error(
        _ message: String,
        category: Category = .general,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
        log(message, level: .error, category: category, file: file, function: function, line: line)
    }
    
    // MARK: - Core Logging Method
    
    private func log(
        _ message: String,
        level: LogLevel,
        category: Category,
        file: String,
        function: String,
        line: Int
    ) {
        // Ï†ÑÏó≠ Î°úÍπÖ ÎπÑÌôúÏÑ±Ìôî Ï≤¥ÌÅ¨
        guard isLoggingEnabled else { return }
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨
        guard availableCategories.contains(category) else { return }
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌôúÏÑ±Ìôî Ï≤¥ÌÅ¨
        guard configuration.isCategoryEnabled(category) else { return }
        
        // Î°úÍ∑∏ Î†àÎ≤® Ï≤¥ÌÅ¨
        guard level >= configuration.minimumLogLevel else { return }
        
        // ÌååÏùºÎ™Ö Ï∂îÏ∂ú
        let fileName = URL(fileURLWithPath: file).lastPathComponent
        
        // Î°úÍ∑∏ Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
        let formattedMessage = formatMessage(
            message: message,
            level: level,
            category: category,
            fileName: fileName,
            function: function,
            line: line
        )
        
        // os.LoggerÎ°ú Ï∂úÎ†•
        if let logger = loggers[category] {
            logger.log(level: level.osLogType, "\(formattedMessage)")
        }
        
        // ÏΩòÏÜîÏóêÎèÑ Ï∂úÎ†• (Í∞úÎ∞ú Ï§ë Ìé∏ÏùòÏÑ±ÏùÑ ÏúÑÌï¥)
        if configuration.shouldPrintToConsole {
            print(formattedMessage)
        }
    }
    
    // MARK: - Message Formatting
    
    private func formatMessage(
        message: String,
        level: LogLevel,
        category: Category,
        fileName: String,
        function: String,
        line: Int
    ) -> String {
        let timestamp = configuration.shouldIncludeTimestamp ? "[\(currentTimestamp())] " : ""
        let categoryIcon = category.icon
        let levelEmoji = level.emoji
        let categoryText = "[\(category.rawValue.uppercased())]"
        let levelText = "[\(level.rawValue)]"
        
        if configuration.shouldIncludeFileInfo {
            return "\(timestamp)\(categoryIcon) \(categoryText) \(levelEmoji) \(levelText) \(message) (\(fileName):\(line) \(function))"
        } else {
            return "\(timestamp)\(categoryIcon) \(categoryText) \(levelEmoji) \(levelText) \(message)"
        }
    }
    
    private func currentTimestamp() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss.SSS"
        return formatter.string(from: Date())
    }
    
    // MARK: - Configuration Management
    
    /// ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    public func setCategoryEnabled(_ category: Category, enabled: Bool) {
        guard availableCategories.contains(category) else { return }
        configuration.categoryStates[category] = enabled
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// Î™®Îì† Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    public func setAllCategoriesEnabled(_ enabled: Bool) {
        for category in availableCategories {
            configuration.categoryStates[category] = enabled
        }
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// ÏµúÏÜå Î°úÍ∑∏ Î†àÎ≤® ÏÑ§Ï†ï
    public func setMinimumLogLevel(_ level: LogLevel) {
        configuration.minimumLogLevel = level
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// Ï†ÑÏó≠ Î°úÍπÖ ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    public func setGlobalLoggingEnabled(_ enabled: Bool) {
        configuration.isGloballyEnabled = enabled
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// ÏΩòÏÜî Ï∂úÎ†• ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    public func setConsoleOutputEnabled(_ enabled: Bool) {
        configuration.shouldPrintToConsole = enabled
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Ìï® Ïó¨Î∂Ä
    public func setTimestampEnabled(_ enabled: Bool) {
        configuration.shouldIncludeTimestamp = enabled
        saveConfiguration()
        objectWillChange.send()
    }
    
    /// ÌååÏùº Ï†ïÎ≥¥ Ìè¨Ìï® Ïó¨Î∂Ä
    public func setFileInfoEnabled(_ enabled: Bool) {
        configuration.shouldIncludeFileInfo = enabled
        saveConfiguration()
        objectWillChange.send()
    }
    
    // MARK: - Configuration Persistence
    
    private func saveConfiguration() {
        guard let data = try? JSONEncoder().encode(configuration) else { return }
        UserDefaults.standard.set(data, forKey: userDefaultsKey)
    }
    
    private func loadConfiguration() {
        guard let data = UserDefaults.standard.data(forKey: userDefaultsKey),
              let config = try? JSONDecoder().decode(LogConfiguration.self, from: data) else {
            return
        }
        configuration = config
    }
    
    // MARK: - Status Methods
    
    /// ÌòÑÏû¨ Î°úÍπÖ ÏÑ§Ï†ï ÏÉÅÌÉú Î∞òÌôò
    public func getCurrentStatus() -> LoggingStatus {
        return LoggingStatus(
            isGloballyEnabled: configuration.isGloballyEnabled,
            isDebugMode: isDebugMode,
            isLoggingEnabled: isLoggingEnabled,
            minimumLogLevel: configuration.minimumLogLevel,
            availableCategories: availableCategories,
            enabledCategories: availableCategories.filter { configuration.isCategoryEnabled($0) },
            shouldPrintToConsole: configuration.shouldPrintToConsole,
            shouldIncludeTimestamp: configuration.shouldIncludeTimestamp,
            shouldIncludeFileInfo: configuration.shouldIncludeFileInfo
        )
    }
    
    /// Î°úÍπÖ ÏÑ§Ï†ïÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú Ï¥àÍ∏∞Ìôî
    public func resetToDefaults() {
        configuration = LogConfiguration(availableCategories: availableCategories)
        saveConfiguration()
        objectWillChange.send()
    }
}

// MARK: - Log Configuration

/// Î°úÍ∑∏ ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Íµ¨Ï°∞Ï≤¥
private struct LogConfiguration: Codable {
    /// Ï†ÑÏó≠ Î°úÍπÖ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä
    var isGloballyEnabled: Bool = true
    
    /// Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌôúÏÑ±Ìôî ÏÉÅÌÉú
    var categoryStates: [LoggingManager.Category: Bool] = [:]
    
    /// ÏµúÏÜå Î°úÍ∑∏ Î†àÎ≤®
    var minimumLogLevel: LoggingManager.LogLevel = .debug
    
    /// ÏΩòÏÜî Ï∂úÎ†• Ïó¨Î∂Ä
    var shouldPrintToConsole: Bool = true
    
    /// ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Ìï® Ïó¨Î∂Ä
    var shouldIncludeTimestamp: Bool = false
    
    /// ÌååÏùº Ï†ïÎ≥¥ Ìè¨Ìï® Ïó¨Î∂Ä
    var shouldIncludeFileInfo: Bool = false
    
    init(availableCategories: [LoggingManager.Category] = LoggingManager.Category.defaultCategories) {
        // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨Îì§Îßå Í∏∞Î≥∏ ÌôúÏÑ±Ìôî
        for category in availableCategories {
            categoryStates[category] = true
        }
    }
    
    func isCategoryEnabled(_ category: LoggingManager.Category) -> Bool {
        return categoryStates[category] ?? false
    }
}

// MARK: - Logging Status

/// ÌòÑÏû¨ Î°úÍπÖ ÏÉÅÌÉúÎ•º ÎÇòÌÉÄÎÇ¥Îäî Íµ¨Ï°∞Ï≤¥
public struct LoggingStatus {
    public let isGloballyEnabled: Bool
    public let isDebugMode: Bool
    public let isLoggingEnabled: Bool
    public let minimumLogLevel: LoggingManager.LogLevel
    public let availableCategories: [LoggingManager.Category]
    public let enabledCategories: [LoggingManager.Category]
    public let shouldPrintToConsole: Bool
    public let shouldIncludeTimestamp: Bool
    public let shouldIncludeFileInfo: Bool
    
    public var summary: String {
        return """
        === Î°úÍπÖ ÏÑ§Ï†ï ÏÉÅÌÉú ===
        Ï†ÑÏó≠ ÌôúÏÑ±Ìôî: \(isGloballyEnabled ? "‚úÖ" : "‚ùå")
        ÎîîÎ≤ÑÍ∑∏ Î™®Îìú: \(isDebugMode ? "‚úÖ" : "‚ùå")
        Ïã§Ï†ú Î°úÍπÖ ÌôúÏÑ±Ìôî: \(isLoggingEnabled ? "‚úÖ" : "‚ùå")
        ÏµúÏÜå Î°úÍ∑∏ Î†àÎ≤®: \(minimumLogLevel.rawValue)
        ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨: \(availableCategories.map { $0.rawValue }.joined(separator: ", "))
        ÌôúÏÑ±ÌôîÎêú Ïπ¥ÌÖåÍ≥†Î¶¨: \(enabledCategories.map { $0.rawValue }.joined(separator: ", "))
        ÏΩòÏÜî Ï∂úÎ†•: \(shouldPrintToConsole ? "‚úÖ" : "‚ùå")
        ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ: \(shouldIncludeTimestamp ? "‚úÖ" : "‚ùå")
        ÌååÏùº Ï†ïÎ≥¥: \(shouldIncludeFileInfo ? "‚úÖ" : "‚ùå")
        """
    }
}

// MARK: - Convenience Extensions

extension LoggingManager.Category: Codable {}
extension LoggingManager.LogLevel: Codable {}

// MARK: - Global Logging Functions

/// Ï†ÑÏó≠ Î°úÍπÖ Ìï®ÏàòÎì§ (Ìé∏ÏùòÏÑ±ÏùÑ ÏúÑÌï¥)
public func logDebug(_ message: String, category: LoggingManager.Category = .general, file: String = #file, function: String = #function, line: Int = #line) {
    Task { @MainActor in
        LoggingManager.shared.debug(message, category: category, file: file, function: function, line: line)
    }
}

public func logInfo(_ message: String, category: LoggingManager.Category = .general, file: String = #file, function: String = #function, line: Int = #line) {
    Task { @MainActor in
        LoggingManager.shared.info(message, category: category, file: file, function: function, line: line)
    }
}

public func logWarning(_ message: String, category: LoggingManager.Category = .general, file: String = #file, function: String = #function, line: Int = #line) {
    Task { @MainActor in
        LoggingManager.shared.warning(message, category: category, file: file, function: function, line: line)
    }
}

public func logError(_ message: String, category: LoggingManager.Category = .general, file: String = #file, function: String = #function, line: Int = #line) {
    Task { @MainActor in
        LoggingManager.shared.error(message, category: category, file: file, function: function, line: line)
    }
}

// MARK: - Project Setup Helper

/// ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ LoggingManager ÏÑ§Ï†ï Ìó¨Ìçº
extension LoggingManager {
    
    /// ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ (USBExternalCamera)Ïö© ÏÑ§Ï†ï
    public static func setupForCurrentProject() {
        // ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑúÎäî Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÇ¨Ïö©
        // ÌïÑÏöîÏãú Ï∂îÍ∞Ä ÏÑ§Ï†ï Í∞ÄÎä•
    }
    
    /// ÎØ∏ÎîîÏñ¥ Ïï±Ïö© ÏÑ§Ï†ï
    public static func setupForMediaApp(bundleIdentifier: String? = nil) -> LoggingManager {
        return configure(
            bundleIdentifier: bundleIdentifier,
            userDefaultsKey: "MediaAppLoggingConfiguration",
            categories: Category.mediaCategories
        )
    }
    
    /// E-Ïª§Î®∏Ïä§ Ïï±Ïö© ÏÑ§Ï†ï
    public static func setupForEcommerceApp(bundleIdentifier: String? = nil) -> LoggingManager {
        return configure(
            bundleIdentifier: bundleIdentifier,
            userDefaultsKey: "EcommerceAppLoggingConfiguration",
            categories: Category.ecommerceCategories
        )
    }
    
    /// ÏÜåÏÖú Ïï±Ïö© ÏÑ§Ï†ï
    public static func setupForSocialApp(bundleIdentifier: String? = nil) -> LoggingManager {
        return configure(
            bundleIdentifier: bundleIdentifier,
            userDefaultsKey: "SocialAppLoggingConfiguration",
            categories: Category.socialCategories
        )
    }
} 
